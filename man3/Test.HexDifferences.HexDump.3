.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.19)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::HexDifferences::HexDump 3"
.TH Test::HexDifferences::HexDump 3 "2012-01-15" "perl v5.14.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::HexDifferences::HexDump \- Format binary to hexadecimal strings
.SH "VERSION"
.IX Header "VERSION"
0.002
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::HexDifferences::HexDump;
\&
\&    $string = hex_dump(
\&        $binary,
\&    );
\&
\&    $string = hex_dump(
\&        $binary,
\&        {
\&            address => $start_address,
\&            format  => "%a : %4C : %d\en",
\&        }
\&    );
.Ve
.SS "Format elements"
.IX Subsection "Format elements"
Every format element in the format string is starting with % like sprintf.
.PP
\fIData format\fR
.IX Subsection "Data format"
.PP
It is not very clever to use little-endian formats for tests.
There is a fallback to bytes if multibyte formats can not displayed.
.PP
.Vb 10
\& %C  \- unsigned char
\& %S  \- unsigned 16\-bit
\& %S< \- unsigned 16\-bit, little\-endian
\& %S> \- unsigned 16\-bit, big\-endian
\& %v  \- unsigned 16\-bit, little\-endian
\& %n  \- unsigned 16\-bit, big\-endian
\& %L  \- unsigned 32\-bit
\& %L< \- unsigned 32\-bit, little\-endian
\& %L> \- unsigned 32\-bit, big\-endian
\& %V  \- unsigned 32\-bit, little\-endian
\& %N  \- unsigned 32\-bit, big\-endian
\& %Q  \- unsigned 64\-bit
\& %Q< \- unsigned 64\-bit, little\-endian
\& %Q> \- unsigned 64\-bit, big\-endian
.Ve
.PP
\fIAddress format\fR
.IX Subsection "Address format"
.PP
.Vb 3
\& %a  \- 16 bit address
\& %4a \- 16 bit address
\& %8a \- 32 bit address
.Ve
.PP
\fIascii format\fR
.IX Subsection "ascii format"
.PP
It can not display all chars.
Fist it must be a printable ascii char.
It can not be anything of space, q{.}, q{'}, q{"} or q{\e}.
Otherwise q{.} will be printed.
.PP
.Vb 1
\& %d \- display ascii
.Ve
.PP
\fIRepetition\fR
.IX Subsection "Repetition"
.PP
.Vb 4
\& %*x \- repetition endless
\& %1x \- repetition 1 time
\& %2x \- repetition 2 times
\& ...
.Ve
.PP
\fISpecial formats\fR
.IX Subsection "Special formats"
.PP
.Vb 1
\& %\en \- ignore \en
.Ve
.SS "Default format"
.IX Subsection "Default format"
The default format is:
.PP
.Vb 1
\& "%a : %4C : %d\en"
.Ve
.PP
or fully written as
.PP
.Vb 1
\& "%a : %4C : %d\en%*x"
.Ve
.SS "Complex formats"
.IX Subsection "Complex formats"
The %...x allows to write mixed formats e.g.
.PP
.Vb 11
\& Format:
\&  %a : %N %4C : %d\en%1x%
\&  %a : %n %2C : %d\en%*x
\& Input:
\&    \e0x01\e0x23\e0x45\e0x67\e0x89\e0xAB\e0xCD\e0xEF
\&    \e0x01\e0x23\e0x45\e0x67
\&    \e0x89\e0xAB\e0xCD\e0xEF
\& Output:
\&    0000 : 01234567 89 AB CD EF : .#\-Eg...
\&    0008 : 0123 45 67 : .#\-E
\&    000C : 89AB CD EF : g...
.Ve
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Inside of this Distribution is a directory named example.
Run this *.t files.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a formatter for binary data.
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "subroutine hex_dump"
.IX Subsection "subroutine hex_dump"
.Vb 7
\&    $string = hex_dump(
\&        $binary,
\&        {
\&            address => $display_start_address,
\&            format  => $format_string,
\&        }
\&    );
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
nothing
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
nothing
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Hash::Util
.PP
Perl6::Export::Attrs
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
none
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
none
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::HexDifferences
.PP
Data::Hexdumper inspired by
.SH "AUTHOR"
.IX Header "AUTHOR"
Steffen Winkler
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2012,
Steffen Winkler
\&\f(CW\*(C`<steffenw at cpan.org>\*(C'\fR.
All rights reserved.
.PP
This module is free software;
you can redistribute it and/or modify it
under the same terms as Perl itself.
